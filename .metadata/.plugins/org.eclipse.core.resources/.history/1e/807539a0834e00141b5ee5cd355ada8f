package project2;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.TreeSet;
import java.util.Vector;

public class MyFakebookOracle extends FakebookOracle {
	
	static String prefix = "yjtang.";
	
	// You must use the following variable as the JDBC connection
	Connection oracleConnection = null;
	
	// You must refer to the following variables for the corresponding tables in your database
	String cityTableName = null;
	String userTableName = null;
	String friendsTableName = null;
	String currentCityTableName = null;
	String hometownCityTableName = null;
	String programTableName = null;
	String educationTableName = null;
	String eventTableName = null;
	String participantTableName = null;
	String albumTableName = null;
	String photoTableName = null;
	String coverPhotoTableName = null;
	String tagTableName = null;
	
	
	// DO NOT modify this constructor
	public MyFakebookOracle(String u, Connection c) {
		super();
		String dataType = u;
		oracleConnection = c;
		// You will use the following tables in your Java code
		cityTableName = prefix+dataType+"_CITIES";
		userTableName = prefix+dataType+"_USERS";
		friendsTableName = prefix+dataType+"_FRIENDS";
		currentCityTableName = prefix+dataType+"_USER_CURRENT_CITY";
		hometownCityTableName = prefix+dataType+"_USER_HOMETOWN_CITY";
		programTableName = prefix+dataType+"_PROGRAMS";
		educationTableName = prefix+dataType+"_EDUCATION";
		eventTableName = prefix+dataType+"_USER_EVENTS";
		albumTableName = prefix+dataType+"_ALBUMS";
		photoTableName = prefix+dataType+"_PHOTOS";
		tagTableName = prefix+dataType+"_TAGS";
	}
	
	
	@Override
	// ***** Query 0 *****
	// This query is given to your for free;
	// You can use it as an example to help you write your own code
	//
	public void findMonthOfBirthInfo() throws SQLException{ 
		
		// Scrollable result set allows us to read forward (using next())
		// and also backward.  
		// This is needed here to support the user of isFirst() and isLast() methods,
		// but in many cases you will not need it.
		// To create a "normal" (unscrollable) statement, you would simply call
		// Statement stmt = oracleConnection.createStatement();
		//
		Statement stmt = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
		        ResultSet.CONCUR_READ_ONLY);
		
		// For each month, find the number of friends born that month
		// Sort them in descending order of count
		ResultSet rst = stmt.executeQuery("select count(*), month_of_birth from "+
				userTableName+
				" where month_of_birth is not null group by month_of_birth order by 1 desc");
		
		this.monthOfMostFriend = 0;
		this.monthOfLeastFriend = 0;
		this.totalFriendsWithMonthOfBirth = 0;
		
		// Get the month with most friends, and the month with least friends.
		// (Notice that this only considers months for which the number of friends is > 0)
		// Also, count how many total friends have listed month of birth (i.e., month_of_birth not null)
		//
		while(rst.next()) {
			int count = rst.getInt(1);
			int month = rst.getInt(2);
			if (rst.isFirst())
				this.monthOfMostFriend = month;
			if (rst.isLast())
				this.monthOfLeastFriend = month;
			this.totalFriendsWithMonthOfBirth += count;
		}
		
		// Get the names of friends born in the "most" month
		rst = stmt.executeQuery("select user_id, first_name, last_name from "+
				userTableName+" where month_of_birth="+this.monthOfMostFriend);
		while(rst.next()) {
			Long uid = rst.getLong(1);
			String firstName = rst.getString(2);
			String lastName = rst.getString(3);
			this.friendsInMonthOfMost.add(new UserInfo(uid, firstName, lastName));
		}
		
		// Get the names of friends born in the "least" month
		rst = stmt.executeQuery("select first_name, last_name, user_id from "+
				userTableName+" where month_of_birth="+this.monthOfLeastFriend);
		while(rst.next()){
			String firstName = rst.getString(1);
			String lastName = rst.getString(2);
			Long uid = rst.getLong(3);
			this.friendsInMonthOfLeast.add(new UserInfo(uid, firstName, lastName));
		}
		
		// Close statement and result set
		rst.close();
		stmt.close();
	}

	
	
	@Override
	// ***** Query 1 *****
	// Find information about friend names:
	// (1) The longest last name (if there is a tie, include all in result)
	// (2) The shortest last name (if there is a tie, include all in result)
	// (3) The most common last name, and the number of times it appears (if there is a tie, include all in result)
	//
	public void findNameInfo() throws SQLException { // Query1
        // Find the following information from your database and store the information as shown
		
		//Get the longest last name
		Statement stmt = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
		        ResultSet.CONCUR_READ_ONLY);
		String sql_getLastnameRange = "select length(last_name) from "
							+ userTableName
							+ " where last_name is not null "
							+ "group by last_name "
							+ "order by length(last_name) desc";
		ResultSet rst = stmt.executeQuery(sql_getLastnameRange);
		int longestLastnameNum = 0;
		int shortestLastnameNum = 0;
		while(rst.next()){
			if (rst.isLast())
				shortestLastnameNum = rst.getInt(1);
			if (rst.isFirst())
				longestLastnameNum = rst.getInt(1);
		}
		if(shortestLastnameNum == 0) shortestLastnameNum = longestLastnameNum;
		String sql_getLongestLastnameString = "select last_name from "
											+ userTableName
											+ " where last_name is not null and length(last_name) = "
											+ longestLastnameNum
											+ " group by last_name "
											+ "order by length(last_name) desc";
		rst = stmt.executeQuery(sql_getLongestLastnameString);
		while(rst.next()){
			this.longestLastNames.add(rst.getString(1));
		}
		String sql_getShortestLastnameString = "select last_name from "
											+ userTableName
											+ " where last_name is not null and length(last_name) = "
											+ shortestLastnameNum
											+ " group by last_name "
											+ "order by length(last_name) desc";
		rst = stmt.executeQuery(sql_getShortestLastnameString);
		while(rst.next()){
			this.shortestLastNames.add(rst.getString(1));
		}
		//Get most common last name
		String sql_getMostCommonLastname = "select count(*), last_name from "
										+ userTableName
										+ " where last_name is not null"
										+ " group by last_name "
										+ "order by count(*) desc";
		rst = stmt.executeQuery(sql_getMostCommonLastname);
		int mostCommonNum = 0;
		this.mostCommonLastNamesCount = 0;
		while(rst.next()){
			if(rst.isFirst())
				mostCommonNum = rst.getInt(1);
			if(rst.getInt(1) == mostCommonNum){
				this.mostCommonLastNames.add(rst.getString(2));
				this.mostCommonLastNamesCount += rst.getInt(1);
			}
		}
	}
	
	@Override
	// ***** Query 2 *****
	// Find the user(s) who have no friends in the network
	//
	// Be careful on this query!
	// Remember that if two users are friends, the friends table
	// only contains the pair of user ids once, subject to 
	// the constraint that user1_id < user2_id
	//
	public void lonelyFriends() throws SQLException {
		// Find the following information from your database and store the information as shown 
		Statement stmt = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
		        ResultSet.CONCUR_READ_ONLY);
		String sql = "select user_id, first_name, last_name from "
				+ userTableName
				+ " where user_id not in "
				+ "(select user1_id from "
				+ friendsTableName
				+ " UNION select user2_id from "
				+ friendsTableName
				+ ")";
		ResultSet rst = stmt.executeQuery(sql);
		while(rst.next()){
			Long uid = rst.getLong(1);
			String firstName = rst.getString(2);
			String lastName = rst.getString(3);
			this.lonelyFriends.add(new UserInfo(uid, firstName, lastName));
			this.countLonelyFriends++;
		}
	}
	 

	@Override
	// ***** Query 3 *****
	// Find the users who still live in their hometowns
	// (I.e., current_city = hometown_city)
	//	
	public void liveAtHome() throws SQLException {
		Statement stmt = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
		        ResultSet.CONCUR_READ_ONLY);
		String sql = String.format("select U.user_id, U.first_name, U.last_name "
				+ "from %s U, %s C, %s H "
				+ "where U.user_id = C.user_id "
				+ "and U.user_id = H.user_id "
				+ "and C.current_city_id = H.hometown_city_id", 
				userTableName, currentCityTableName, hometownCityTableName);
		ResultSet rst = stmt.executeQuery(sql);
		while(rst.next()){
			Long uid = rst.getLong(1);
			String firstName = rst.getString(2);
			String lastName = rst.getString(3);
			this.liveAtHome.add(new UserInfo(uid, firstName, lastName));
			this.countLiveAtHome++;
		}
	}



	@Override
	// **** Query 4 ****
	// Find the top-n photos based on the number of tagged users
	// If there are ties, choose the photo with the smaller numeric PhotoID first
	// 
	public void findPhotosWithMostTags(int n) throws SQLException { 
		//First select tag_photo_id for top n photos
		Statement stmt = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
		        ResultSet.CONCUR_READ_ONLY);
		String sql = String.format("select * from"
				+ "(select tag_photo_id "
				+ "from %s "
				+ "group by tag_photo_id "
				+ "order by count(*) desc, tag_photo_id) "
				+ "where rownum <= %d", tagTableName, n);
		ResultSet rst = stmt.executeQuery(sql);
		while(rst.next()){
			String tag_photo_id = rst.getString(1);
			Statement stmt_getPhoto = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
			        ResultSet.CONCUR_READ_ONLY);
			String sql_getPhoto = String.format("select P.photo_id, P.album_id, "
												+ "A.album_name, P.photo_caption, P.photo_link "
												+ "from %s P, %s A "
												+ "where P.photo_id = %s "
												+ "and P.album_id = A.album_id", 
												photoTableName, albumTableName, tag_photo_id);
			ResultSet rst_photo = stmt_getPhoto.executeQuery(sql_getPhoto);
			rst_photo.next();
			String photoId = rst_photo.getString(1);
			String albumId = rst_photo.getString(2);
			String albumName = rst_photo.getString(3);
			String photoCaption = rst_photo.getString(4);
			String photoLink = rst_photo.getString(5);
			PhotoInfo p = new PhotoInfo(photoId, albumId, albumName, photoCaption, photoLink);
			TaggedPhotoInfo tp = new TaggedPhotoInfo(p);
			Statement stmt_getUser = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
			        ResultSet.CONCUR_READ_ONLY);
			String sql_getUser = String.format("select U.user_id, U.first_name, U.last_name "
											+ "from %s U, %s T "
											+ "where T.tag_subject_id = U.user_id "
											+ "and T.tag_photo_id = %s", 
											userTableName, tagTableName, tag_photo_id);
			ResultSet rst_users = stmt_getUser.executeQuery(sql_getUser);
			while(rst_users.next()){
				Long uid = rst_users.getLong(1);
				String firstName = rst_users.getString(2);
				String lastName = rst_users.getString(3);
				tp.addTaggedUser(new UserInfo(uid, firstName, lastName));
			}
			this.photosWithMostTags.add(tp);
		}
	}

	
	
	
	@Override
	// **** Query 5 ****
	// Find suggested "match pairs" of friends, using the following criteria:
	// (1) One of the friends is female, and the other is male
	// (2) Their age difference is within "yearDiff"
	// (3) They are not friends with one another
	// (4) They should be tagged together in at least one photo
	//
	// You should up to n "match pairs"
	// If there are more than n match pairs, you should break ties as follows:
	// (i) First choose the pairs with the largest number of shared photos
	// (ii) If there are still ties, choose the pair with the smaller user_id for the female
	// (iii) If there are still ties, choose the pair with the smaller user_id for the male
	//
	public void matchMaker(int n, int yearDiff) throws SQLException { 
		//Create view
		Statement stmt = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
		        ResultSet.CONCUR_READ_ONLY);
		String sql_create_view = String.format("create view satisifiedPairs as "
											+ "select T1.tag_photo_id as Pid, "
											+ "F.user_id as Fid, M.user_id as Mid "
											+ "from %s M, %s F, %s T1, %s T2 "
											+ "where (M.user_id, F.user_id) not in (select user1_id, user2_id from yjtang.public_friends) "
											+ "and (F.user_id, M.user_id) not in (select user1_id, user2_id from yjtang.public_friends) "
											+ "and M.user_id != F.user_id "
											+ "and M.gender = 'male' "
											+ "and F.gender = 'female' "
											+ "and ABS(M.year_of_birth - F.year_of_birth) <= %d "
											+ "and M.user_id = T1.tag_subject_id "
											+ "and F.user_id = T2.tag_subject_id "
											+ "and T1.tag_photo_id = T2.tag_photo_id",
											userTableName, userTableName, tagTableName, tagTableName, yearDiff);
		stmt.executeQuery(sql_create_view);
		//Get pairs
		String sql_getMatchList = "select Fid, Mid "
								+ "from satisifiedPairs "
								+ "group by (Mid, Fid) "
								+ "order by count(*) desc, Fid, Mid";
		ResultSet rst_MatchList = stmt.executeQuery(sql_getMatchList);
		while(rst_MatchList.next() && n != 0){
			Long girlUserId = rst_MatchList.getLong(1);
			Long boyUserId = rst_MatchList.getLong(2);
			Statement stmt_getUser = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
			        ResultSet.CONCUR_READ_ONLY);
			ResultSet rst_user = stmt_getUser.executeQuery("select first_name, last_name, year_of_birth from " + userTableName + 
													" where user_id = " + girlUserId);
			rst_user.next();
			String girlFirstName = rst_user.getString(1);
			String girlLastName = rst_user.getString(2);
			int girlYear = rst_user.getInt(3);
			rst_user = stmt_getUser.executeQuery("select first_name, last_name, year_of_birth from " + userTableName + 
					" where user_id = " + boyUserId);
			rst_user.next();
			String boyFirstName = rst_user.getString(1);
			String boyLastName = rst_user.getString(2);
			int boyYear = rst_user.getInt(3);
			MatchPair mp = new MatchPair(girlUserId, girlFirstName, girlLastName, 
					girlYear, boyUserId, boyFirstName, boyLastName, boyYear);
			n--;
			String sql_getSharedPhoto = String.format("select S.Pid, P.album_id, A.album_name, P.photo_caption, P.photo_link "
													+ "from satisifiedPairs S, %s P, %s A "
													+ "where S.Mid = %,d "
													+ "and S.Fid = %,d "
													+ "and P.photo_id = S.Pid "
													+ "and A.album_id = P.album_id", 
													photoTableName, albumTableName, boyUserId, girlUserId);
			Statement stmt_getSharedPhoto = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
			        ResultSet.CONCUR_READ_ONLY);
			ResultSet rst_sharedPhoto = stmt_getSharedPhoto.executeQuery(sql_getSharedPhoto);
			while(rst_sharedPhoto.next()){
				String sharedPhotoId = rst_sharedPhoto.getString(1);
				String sharedPhotoAlbumId = rst_sharedPhoto.getString(2);
				String sharedPhotoAlbumName = rst_sharedPhoto.getString(3);
				String sharedPhotoCaption = rst_sharedPhoto.getString(4);
				String sharedPhotoLink = rst_sharedPhoto.getString(5);
				mp.addSharedPhoto(new PhotoInfo(sharedPhotoId, sharedPhotoAlbumId, 
						sharedPhotoAlbumName, sharedPhotoCaption, sharedPhotoLink));
			}
			this.bestMatches.add(mp);
			stmt_getUser.close();
			rst_user.close();
			stmt_getSharedPhoto.close();
			rst_sharedPhoto.close();
		}
		//Drop view
		String sql_drop_view = "drop view satisifiedPairs";
		stmt.executeQuery(sql_drop_view);
		
		stmt.close();
		rst_MatchList.close();
	}

	
	
	// **** Query 6 ****
	// Suggest friends based on mutual friends
	// 
	// Find the top n pairs of users in the database who share the most
	// friends, but such that the two users are not friends themselves.
	//
	// Your output will consist of a set of pairs (user1_id, user2_id)
	// No pair should appear in the result twice; you should always order the pairs so that
	// user1_id < user2_id
	//
	// If there are ties, you should give priority to the pair with the smaller user1_id.
	// If there are still ties, give priority to the pair with the smaller user2_id.
	//
	@Override
	public void suggestFriendsByMutualFriends(int n) throws SQLException {
//		Long user1_id = 123L;
//		String user1FirstName = "Friend1FirstName";
//		String user1LastName = "Friend1LastName";
//		Long user2_id = 456L;
//		String user2FirstName = "Friend2FirstName";
//		String user2LastName = "Friend2LastName";
//		FriendsPair p = new FriendsPair(user1_id, user1FirstName, user1LastName, user2_id, user2FirstName, user2LastName);
//
//		p.addSharedFriend(567L, "sharedFriend1FirstName", "sharedFriend1LastName");
//		p.addSharedFriend(678L, "sharedFriend2FirstName", "sharedFriend2LastName");
//		p.addSharedFriend(789L, "sharedFriend3FirstName", "sharedFriend3LastName");
//		this.suggestedFriendsPairs.add(p);
		
		//Create view
		Statement stmt = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
		        ResultSet.CONCUR_READ_ONLY);
		String sql_create_view = String.format("create view sharedFriendPairs as "
				+ "select U1.user_id as user1, U2.user_id as user2, F1.user2_id as sharedFriend "
				+ "from %s U1, %s U2, %s F1, %s F2 "
				+ "where U1.user_id < U2.user_id "
				+ "and (U1.user_id, U2.user_id) not in (select user1_id, user2_id from yjtang.public_friends) "
				+ "and (U1.user_id = F1.user1_id and U2.user_id = F2.user1_id and F1.user2_id = F2.user2_id) "
				+ "UNION "
				+ "select U1.user_id as user1, U2.user_id as user2, F1.user2_id as sharedFriend "
				+ "from %s U1, %s U2, %s F1, %s F2 "
				+ "where U1.user_id < U2.user_id "
				+ "and (U1.user_id, U2.user_id) not in (select user1_id, user2_id from yjtang.public_friends) "
				+ "and (U1.user_id = F1.user1_id and U2.user_id = F2.user2_id and F1.user2_id = F2.user1_id) "
				+ "UNION "
				+ "select U1.user_id as user1, U2.user_id as user2, F1.user1_id as sharedFriend "
				+ "from %s U1, %s U2, %s F1, %s F2 "
				+ "where U1.user_id < U2.user_id "
				+ "and (U1.user_id, U2.user_id) not in (select user1_id, user2_id from yjtang.public_friends) "
				+ "and (U1.user_id = F1.user2_id and U2.user_id = F2.user2_id and F1.user1_id = F2.user1_id) "
				+ "UNION "
				+ "select U1.user_id as user1, U2.user_id as user2, F1.user2_id as sharedFriend "
				+ "from %s U1, %s U2, %s F1, %s F2 "
				+ "where U1.user_id < U2.user_id "
				+ "and (U1.user_id, U2.user_id) not in (select user1_id, user2_id from yjtang.public_friends) "
				+ "and (U1.user_id = F1.user1_id and U2.user_id = F2.user2_id and F1.user2_id = F2.user1_id)",
				userTableName, userTableName, friendsTableName, friendsTableName,
				userTableName, userTableName, friendsTableName, friendsTableName,
				userTableName, userTableName, friendsTableName, friendsTableName,
				userTableName, userTableName, friendsTableName, friendsTableName);
		stmt.executeQuery(sql_create_view);
		
		//Get pairs
		String sql_getPair = "select user1, user2 "
				+ "from sharedFriendPairs "
				+ "group by (user1, user2) "
				+ "order by count(*) desc, user1 asc, user2 asc";
		ResultSet rst_getPair = stmt.executeQuery(sql_getPair);
		while(rst_getPair.next() && n != 0){
			Long user1_id = rst_getPair.getLong(1);
			Long user2_id = rst_getPair.getLong(2);
			Statement stmt_getUser = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
			        ResultSet.CONCUR_READ_ONLY);
			ResultSet rst_user = stmt_getUser.executeQuery("select first_name, last_name " + userTableName + 
													" where user_id = " + user1_id);
			rst_user.next();
			String user1FirstName = rst_user.getString(1);
			String user1LastName = rst_user.getString(2);
			rst_user = stmt_getUser.executeQuery("select first_name, last_name " + userTableName + 
					" where user_id = " + user2_id);
			rst_user.next();
			String user2FirstName = rst_user.getString(1);
			String user2LastName = rst_user.getString(2);
			FriendsPair p = new FriendsPair(user1_id, user1FirstName, user1LastName, user2_id, user2FirstName, user2LastName);
			n--;
			//Get Shared Friends list
			String sql_getSharedFriendString = String.format("select sharedFriend "
														+ "from sharedFriendPairs "
														+ "where user1 = %,d"
														+ "and user2 = %,d", user1_id, user2_id);
			Statement stmt_getSharedFriend = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
			        ResultSet.CONCUR_READ_ONLY);
			ResultSet rst_sharedFriend = stmt_getSharedFriend.executeQuery(sql_getSharedFriendString);
			while(rst_sharedFriend.next()){
				Long sharedFriendID = rst_sharedFriend.getLong(1);
				rst_user = stmt_getUser.executeQuery("select first_name, last_name " + userTableName + 
													" where user_id = " + sharedFriendID);
				rst_user.next();
				String sharedFriendFirstName = rst_user.getString(1);
				String sharedFriendLastName = rst_user.getString(2);
				p.addSharedFriend(sharedFriendID, sharedFriendFirstName, sharedFriendLastName);
			}
		}
		
		//Drop view
		String sql_drop_view = "drop view sharedFriendPairs";
		stmt.executeQuery(sql_drop_view);
		
		
	}
	
	
	//@Override
	// ***** Query 7 *****
	// Given the ID of a user, find information about that
	// user's oldest friend and youngest friend
	// 
	// If two users have exactly the same age, meaning that they were born
	// on the same day, then assume that the one with the larger user_id is older
	//
	public void findAgeInfo(Long user_id) throws SQLException {
//		this.oldestFriend = new UserInfo(1L, "Oliver", "Oldham");
//		this.youngestFriend = new UserInfo(25L, "Yolanda", "Young");
		
		//Youngest
		Statement stmt_youngest = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
		        ResultSet.CONCUR_READ_ONLY);
		String sql_youngest = String.format("select * from "
								+ "(select U.user_id, U.first_name, U.last_name "
								+ "from %s U, %s friends "
								+ "where "
								+ "(U.user_id = friends.user1_id and friends.user2_id = %,d) "
								+ "or (U.user_id = friends.user2_id and friends.user1_id = %,d) "
								+ "order by U.year_of_birth desc, U.month_of_birth desc, U.day_of_birth desc, U.user_id asc)"
								+ "where rownum <= 1", 
								userTableName, friendsTableName, user_id, user_id);
		ResultSet rst_youngest = stmt_youngest.executeQuery(sql_youngest);
		rst_youngest.next();
		Long uid_youngest = rst_youngest.getLong(1);
		String firstName_youngest = rst_youngest.getString(2);
		String lastName_youngest = rst_youngest.getString(3);
		this.youngestFriend = new UserInfo(uid_youngest, firstName_youngest, lastName_youngest);
		
		//Oldest
		Statement stmt_oldest = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
		        ResultSet.CONCUR_READ_ONLY);
		String sql_oldest = String.format("select * from "
								+ "(select U.user_id, U.first_name, U.last_name "
								+ "from %s U, %s friends "
								+ "where "
								+ "(U.user_id = friends.user1_id and friends.user2_id = %,d) "
								+ "or (U.user_id = friends.user2_id and friends.user1_id = %,d) "
								+ "order by U.year_of_birth asc, U.month_of_birth asc, U.day_of_birth asc, U.user_id desc)"
								+ "where rownum <= 1", 
								userTableName, friendsTableName, user_id, user_id);
		ResultSet rst_oldest = stmt_oldest.executeQuery(sql_oldest);
		rst_oldest.next();
		Long uid_oldest = rst_oldest.getLong(1);
		String firstName_oldest = rst_oldest.getString(2);
		String lastName_oldest = rst_oldest.getString(3);
		this.oldestFriend = new UserInfo(uid_oldest, firstName_oldest, lastName_oldest);
	}
	
	
	@Override
	// ***** Query 8 *****
	// 
	// Find the name of the city with the most events, as well as the number of 
	// events in that city.  If there is a tie, return the names of all of the (tied) cities.
	//
	public void findEventCities() throws SQLException {
		Statement stmt = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
		        ResultSet.CONCUR_READ_ONLY);
		String sql = String.format("select count(*) as num, event_city_id "
								+ "from %s "
								+ "group by event_city_id "
								+ "order by num desc", eventTableName);
		ResultSet rst = stmt.executeQuery(sql);
		while(rst.next()){
			if(rst.isFirst())
				this.eventCount = rst.getInt(1);
			if(this.eventCount == rst.getInt(1)){
				String city_id = rst.getString(2);
				Statement stmt_getCityName = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
				        ResultSet.CONCUR_READ_ONLY);
				String sql_getCityName = String.format("select city_name "
													+ "from %s "
													+ "where city_id = %s", 
													cityTableName, city_id);
				ResultSet rst_getCityName = stmt_getCityName.executeQuery(sql_getCityName);
				rst_getCityName.next();
				this.popularCityNames.add(rst_getCityName.getString(1));
			}
			else break;
		}
	}
	
	
	
	@Override
//	 ***** Query 9 *****
	//
	// Find pairs of potential siblings and print them out in the following format:
	//   # pairs of siblings
	//   sibling1 lastname(id) and sibling2 lastname(id)
	//   siblingA lastname(id) and siblingB lastname(id)  etc.
	//
	// A pair of users are potential siblings if they have the same last name and hometown, if they are friends, and
	// if they are less than 10 years apart in age.  Pairs of siblings are returned with the lower user_id user first
	// on the line.  They are ordered based on the first user_id and in the event of a tie, the second user_id.
	//  
	//
	public void findPotentialSiblings() throws SQLException {	
		Statement stmt = oracleConnection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
		        ResultSet.CONCUR_READ_ONLY);
		String sql = String.format("select S1.user_id, S1.first_name, S1.last_name, "
								+ "S2.user_id, S2.first_name, S2.last_name "
								+ "from %s S1, %s S2,  %s H1, %s H2 "
								+ "where S1.last_name = S2.last_name "
								+ "and S1.user_id = H1.user_id "
								+ "and S2.user_id = H2.user_id "
								+ "and H1.hometown_city_id = H2.hometown_city_id "
								+ "and S1.user_id < S2.user_id "
								+ "and (S1.user_id, S2.user_id) in (select user1_id, user2_id from yjtang.public_friends) "
								+ "and ABS(S1.year_of_birth - S2.year_of_birth) < 10 "
								+ "order by S1.user_id, S2.user_id",
								userTableName, userTableName, hometownCityTableName, hometownCityTableName);
		System.out.println(sql);
		ResultSet rst = stmt.executeQuery(sql);
		while(rst.next()){
			Long user1_id = rst.getLong(1);
			String user1FirstName = rst.getString(2);
			String user1LastName = rst.getString(3);
			Long user2_id = rst.getLong(4);
			String user2FirstName = rst.getNString(5);
			String user2LastName = rst.getNString(6);
			SiblingInfo s = new SiblingInfo(user1_id, user1FirstName, user1LastName, user2_id, user2FirstName, user2LastName);
			this.siblings.add(s);
		}
	}
	
}
